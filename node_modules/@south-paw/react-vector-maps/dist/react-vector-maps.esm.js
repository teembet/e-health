import React from 'react';

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var VectorMap = function VectorMap(_ref) {
  var id = _ref.id,
      name = _ref.name,
      layers = _ref.layers,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? 0 : _ref$tabIndex,
      layerProps = _ref.layerProps,
      checkedLayers = _ref.checkedLayers,
      currentLayers = _ref.currentLayers,
      children = _ref.children,
      other = _objectWithoutPropertiesLoose(_ref, ["id", "name", "layers", "tabIndex", "layerProps", "checkedLayers", "currentLayers", "children"]);

  if (!layers || layers.length === 0) {
    // eslint-disable-next-line no-console
    console.error("[react-vector-maps] No 'layers' prop provided. Did you spread a map object onto the component?");
    return null;
  }

  return React.createElement("svg", Object.assign({
    xmlns: "http://www.w3.org/2000/svg",
    key: id,
    "aria-label": name
  }, other), children, layers.map(function (layer) {
    return React.createElement("path", Object.assign({
      key: layer.id,
      tabIndex: tabIndex,
      "aria-label": layer.name,
      "aria-checked": checkedLayers && checkedLayers.includes(layer.id),
      "aria-current": currentLayers && currentLayers.includes(layer.id)
    }, layer, layerProps));
  }));
};

export { VectorMap };
//# sourceMappingURL=react-vector-maps.esm.js.map
