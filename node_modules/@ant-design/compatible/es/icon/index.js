function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import * as allIcons from "@ant-design/icons/es/icons";
import AntdIcon, { createFromIconfontCN, getTwoToneColor, setTwoToneColor } from '@ant-design/icons';
import { withThemeSuffix, removeTypeTheme, getThemeFromTypeName, alias } from './utils';
import warning from '../_util/warning';
import upgradeMessage from '../_util/upgradeMessage';
var iconsMap = allIcons;

var LegacyTypeIcon = function LegacyTypeIcon(props) {
  var type = props.type,
      theme = props.theme;

  if (theme) {
    var themeInName = getThemeFromTypeName(type);
    warning(!themeInName || theme === themeInName, 'Icon', "The icon name '".concat(type, "' already specify a theme '").concat(themeInName, "',") + " the 'theme' prop '".concat(theme, "' will be ignored."));
  }

  var computedType = withThemeSuffix(removeTypeTheme(alias(type)), theme || 'outlined');
  var targetIconComponent = iconsMap[computedType];
  warning(targetIconComponent, 'Icon', "The icon name '".concat(type, "'").concat(theme ? "with ".concat(theme) : '', " doesn't exist, please check it at https://ant.design/components/icon"));
  return targetIconComponent ? /*#__PURE__*/React.createElement(targetIconComponent, props) : null;
};

var Icon = function Icon(props) {
  var type = props.type,
      component = props.component,
      children = props.children;
  upgradeMessage('Icon');
  warning(Boolean(type || component || children), 'Icon', 'Should have `type` prop or `component` prop or `children`.');

  if (component || children) {
    return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread({}, props));
  }

  if (typeof type === 'string') {
    return /*#__PURE__*/React.createElement(LegacyTypeIcon, _objectSpread(_objectSpread({}, props), {}, {
      type: type
    }));
  }

  return /*#__PURE__*/React.createElement(AntdIcon, null);
};

Icon.createFromIconfontCN = createFromIconfontCN;
Icon.getTwoToneColor = getTwoToneColor;
Icon.setTwoToneColor = setTwoToneColor;
export default Icon;