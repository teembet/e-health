{"ast":null,"code":"import { userConstants } from './types';\nexport function login() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        user: action.user\n      };\n\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        user: action.user\n      };\n\n    case userConstants.LOGIN_FAILURE:\n      return {};\n\n    case userConstants.LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n} // export function user(state = [], action) {\n//   switch (action.type) {\n//     case userConstants.USER_SAVE:\n//       const id = getNewId(state);\n//       return  [ {...action.payload,id} , ...state]\n//       ;\n//     // case userConstants.LOGIN_SUCCESS:\n//     //   return {\n//     //     loggedIn: true,\n//     //     user: action.user\n//     //   };\n//     // case userConstants.LOGIN_FAILURE:\n//     //   return {};\n//     // case userConstants.LOGOUT:\n//     //   return {};\n//     default:\n//       return state\n//   }\n// }\n\nexport function registration() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return { ...state,\n        ...action.payload\n      };\n\n    case userConstants.REGISTER_SUCCESS:\n      const id = getNewId(state);\n      return [{ ...action.payload,\n        id\n      }, ...state];\n\n    case userConstants.REGISTER_FAILURE:\n      return { ...state,\n        registering: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction getNewId(patients) {\n  return patients.map(patient => patient.id).map(id => parseInt(id)).reduce((largest, id) => Math.max(largest, id + 1), -1).toString();\n}","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/reducers.ts"],"names":["userConstants","login","state","action","type","LOGIN_REQUEST","user","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","registration","REGISTER_REQUEST","payload","REGISTER_SUCCESS","id","getNewId","REGISTER_FAILURE","registering","patients","map","patient","parseInt","reduce","largest","Math","max","toString"],"mappings":"AACA,SAAQA,aAAR,QAA4B,SAA5B;AAEI,OAAO,SAASC,KAAT,GAAmC;AAAA,MAApBC,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,aAAa,CAACK,aAAnB;AACE,aAAO;AAELC,QAAAA,IAAI,EAAEH,MAAM,CAACG;AAFR,OAAP;;AAIF,SAAKN,aAAa,CAACO,aAAnB;AACE,aAAO;AAELD,QAAAA,IAAI,EAAEH,MAAM,CAACG;AAFR,OAAP;;AAIF,SAAKN,aAAa,CAACQ,aAAnB;AACE,aAAO,EAAP;;AACF,SAAKR,aAAa,CAACS,MAAnB;AACE,aAAO,EAAP;;AACF;AACE,aAAOP,KAAP;AAhBJ;AAkBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAO,SAASQ,YAAT,GAA0C;AAAA,MAApBR,KAAoB,uEAAZ,EAAY;AAAA,MAARC,MAAQ;;AAE7C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKJ,aAAa,CAACW,gBAAnB;AAEE,aAAO,EAAE,GAAGT,KAAL;AAAY,WAAGC,MAAM,CAACS;AAAtB,OAAP;;AAGF,SAAKZ,aAAa,CAACa,gBAAnB;AACE,YAAMC,EAAE,GAAGC,QAAQ,CAACb,KAAD,CAAnB;AAEH,aAAS,CAAE,EAAC,GAAGC,MAAM,CAACS,OAAX;AAAmBE,QAAAA;AAAnB,OAAF,EAA2B,GAAGZ,KAA9B,CAAT;;AAIC,SAAKF,aAAa,CAACgB,gBAAnB;AACE,aAAO,EAAE,GAAGd,KAAL;AAAYe,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF;AACE,aAAOf,KAAP;AAhBJ;AAkBD;;AACP,SAASa,QAAT,CAAkBG,QAAlB,EAA4B;AACxB,SAAOA,QAAQ,CACZC,GADI,CACCC,OAAD,IAAaA,OAAO,CAACN,EADrB,EAEJK,GAFI,CAECL,EAAD,IAAQO,QAAQ,CAACP,EAAD,CAFhB,EAGJQ,MAHI,CAGG,CAACC,OAAD,EAAUT,EAAV,KAAiBU,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkBT,EAAE,GAAG,CAAvB,CAHpB,EAG+C,CAAC,CAHhD,EAIJY,QAJI,EAAP;AAKD","sourcesContent":["\nimport {userConstants} from './types';\n   \n    export function login(state = [], action) {\n      switch (action.type) {\n        case userConstants.LOGIN_REQUEST:\n          return {\n            \n            user: action.user\n          };\n        case userConstants.LOGIN_SUCCESS:\n          return {\n           \n            user: action.user\n          };\n        case userConstants.LOGIN_FAILURE:\n          return {};\n        case userConstants.LOGOUT:\n          return {};\n        default:\n          return state\n      }\n    }\n\n    // export function user(state = [], action) {\n    //   switch (action.type) {\n    //     case userConstants.USER_SAVE:\n    //       const id = getNewId(state);\n    //       return  [ {...action.payload,id} , ...state]\n    //       ;\n    //     // case userConstants.LOGIN_SUCCESS:\n    //     //   return {\n    //     //     loggedIn: true,\n    //     //     user: action.user\n    //     //   };\n    //     // case userConstants.LOGIN_FAILURE:\n    //     //   return {};\n    //     // case userConstants.LOGOUT:\n    //     //   return {};\n    //     default:\n    //       return state\n    //   }\n    // }\n\n    \n\n    export function registration(state = [], action) {\n      \n        switch (action.type) {\n          case userConstants.REGISTER_REQUEST:\n         \n            return { ...state, ...action.payload };\n\n\n          case userConstants.REGISTER_SUCCESS:\n            const id = getNewId(state);\n        \n         return   [ {...action.payload,id} , ...state];\n           \n        \n\n          case userConstants.REGISTER_FAILURE:\n            return { ...state, registering: false }\n          default:\n            return state\n        }\n      }\nfunction getNewId(patients) {\n    return patients\n      .map((patient) => patient.id)\n      .map((id) => parseInt(id))\n      .reduce((largest, id) => Math.max(largest, id + 1), -1)\n      .toString();\n  }"]},"metadata":{},"sourceType":"module"}