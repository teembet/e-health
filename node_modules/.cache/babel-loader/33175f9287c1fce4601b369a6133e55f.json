{"ast":null,"code":"import { userConstants } from './types'; // let user = JSON.parse(localStorage.getItem('user'));\n// const initialState = user ? { loggedIn: true, user } : {};\n\nconst initialState = {\n  registering: false\n};\nexport function authentication() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loggingIn: true,\n        user: action.user\n      };\n\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: action.user\n      };\n\n    case userConstants.LOGIN_FAILURE:\n      return {};\n\n    case userConstants.LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n}\nexport function registration() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return { ...state,\n        registering: true\n      };\n\n    case userConstants.REGISTER_SUCCESS:\n      return { ...state,\n        registering: false\n      };\n\n    case userConstants.REGISTER_FAILURE:\n      return { ...state,\n        registering: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction getNewId(patients) {\n  return patients.map(patient => patient.id).map(id => parseInt(id)).reduce((largest, id) => Math.max(largest, id + 1), -1).toString();\n}","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/reducers.ts"],"names":["userConstants","initialState","registering","authentication","state","action","type","LOGIN_REQUEST","loggingIn","user","LOGIN_SUCCESS","loggedIn","LOGIN_FAILURE","LOGOUT","registration","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","getNewId","patients","map","patient","id","parseInt","reduce","largest","Math","max","toString"],"mappings":"AACA,SAAQA,aAAR,QAA4B,SAA5B,C,CACI;AACA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAGA,OAAO,SAASC,cAAT,GAAsD;AAAA,MAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAa,CAACO,aAAnB;AACE,aAAO;AACLC,QAAAA,SAAS,EAAE,IADN;AAELC,QAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFR,OAAP;;AAIF,SAAKT,aAAa,CAACU,aAAnB;AACE,aAAO;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELF,QAAAA,IAAI,EAAEJ,MAAM,CAACI;AAFR,OAAP;;AAIF,SAAKT,aAAa,CAACY,aAAnB;AACE,aAAO,EAAP;;AACF,SAAKZ,aAAa,CAACa,MAAnB;AACE,aAAO,EAAP;;AACF;AACE,aAAOT,KAAP;AAhBJ;AAkBD;AAED,OAAO,SAASU,YAAT,GAAoD;AAAA,MAA9BV,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,aAAa,CAACe,gBAAnB;AACE,aAAO,EAAE,GAAGX,KAAL;AAAYF,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF,SAAKF,aAAa,CAACgB,gBAAnB;AACE,aAAO,EAAE,GAAGZ,KAAL;AAAYF,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF,SAAKF,aAAa,CAACiB,gBAAnB;AACE,aAAO,EAAE,GAAGb,KAAL;AAAYF,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF;AACE,aAAOE,KAAP;AARJ;AAUD;;AACP,SAASc,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,SAAOA,QAAQ,CACZC,GADI,CACCC,OAAD,IAAaA,OAAO,CAACC,EADrB,EAEJF,GAFI,CAECE,EAAD,IAAQC,QAAQ,CAACD,EAAD,CAFhB,EAGJE,MAHI,CAGG,CAACC,OAAD,EAAUH,EAAV,KAAiBI,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkBH,EAAE,GAAG,CAAvB,CAHpB,EAG+C,CAAC,CAHhD,EAIJM,QAJI,EAAP;AAKD","sourcesContent":["\nimport {userConstants} from './types';\n    // let user = JSON.parse(localStorage.getItem('user'));\n    // const initialState = user ? { loggedIn: true, user } : {};\n    const initialState = {\n      registering: false,\n    }\n    export function authentication(state = initialState, action) {\n      switch (action.type) {\n        case userConstants.LOGIN_REQUEST:\n          return {\n            loggingIn: true,\n            user: action.user\n          };\n        case userConstants.LOGIN_SUCCESS:\n          return {\n            loggedIn: true,\n            user: action.user\n          };\n        case userConstants.LOGIN_FAILURE:\n          return {};\n        case userConstants.LOGOUT:\n          return {};\n        default:\n          return state\n      }\n    }\n\n    export function registration(state = initialState, action) {\n        switch (action.type) {\n          case userConstants.REGISTER_REQUEST:\n            return { ...state, registering: true };\n          case userConstants.REGISTER_SUCCESS:\n            return { ...state, registering: false }\n          case userConstants.REGISTER_FAILURE:\n            return { ...state, registering: false }\n          default:\n            return state\n        }\n      }\nfunction getNewId(patients) {\n    return patients\n      .map((patient) => patient.id)\n      .map((id) => parseInt(id))\n      .reduce((largest, id) => Math.max(largest, id + 1), -1)\n      .toString();\n  }"]},"metadata":{},"sourceType":"module"}