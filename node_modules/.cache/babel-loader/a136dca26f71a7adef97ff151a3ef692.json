{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/avatar/style\";\nimport _Avatar from \"antd/es/avatar\";\nvar _jsxFileName = \"/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/layout/components/appointmentsTable/AppointmentsTable.tsx\";\nimport React from 'react';\n\nconst AppointmentImg = _ref => {\n  let {\n    img\n  } = _ref;\n  const isData = img.startsWith('data:image');\n  const isWithPath = img.startsWith('http');\n\n  if (isData || isWithPath) {\n    return /*#__PURE__*/React.createElement(_Avatar, {\n      size: 40,\n      src: img,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(_Avatar, {\n    size: 40,\n    src: `${window.location.origin}/${img}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 10\n    }\n  });\n};\n\nconst columns = [{\n  key: 'img',\n  title: 'Photo',\n  dataIndex: 'img',\n  render: img => /*#__PURE__*/React.createElement(AppointmentImg, {\n    img: img,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 22\n    }\n  })\n}, {\n  key: 'name',\n  dataIndex: 'name',\n  title: 'Name',\n  sorter: (a, b) => a.name > b.name ? 1 : -1,\n  render: name => /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 23\n    }\n  }, name)\n}, {\n  key: 'email',\n  dataIndex: 'email',\n  title: 'Email',\n  sorter: (a, b) => a.email > b.email ? 1 : -1,\n  render: email => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"nowrap\",\n    style: {\n      color: '#336cfb'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icofont icofont-ui-email mr-1\",\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), email)\n}, {\n  key: 'data',\n  dataIndex: 'date',\n  title: 'Date',\n  render: date => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"nowrap\",\n    style: {\n      color: '#a5a5a5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, date)\n}, {\n  key: 'visit',\n  title: 'Visit time',\n  render: appointment => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"nowrap\",\n    style: {\n      color: '#a5a5a5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, appointment.fromTo)\n}, {\n  key: 'number',\n  dataIndex: 'number',\n  title: 'Number',\n  render: phone => /*#__PURE__*/React.createElement(\"span\", {\n    className: \"d-flex align-baseline nowrap\",\n    style: {\n      color: '#336cfb'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"icofont icofont-ui-cell-phone mr-1\",\n    style: {\n      fontSize: 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), phone)\n}, {\n  key: 'doctor',\n  title: 'Doctor',\n  dataIndex: 'doctor'\n}, {\n  key: 'condition',\n  title: 'Injury/Condition',\n  dataIndex: 'injury'\n}, {}];\n\nconst AppointmentsTable = _ref2 => {\n  let {\n    data,\n    actions\n  } = _ref2;\n  const actionColumn = {\n    key: 'actions',\n    title: 'Actions',\n    render: actions\n  };\n  const displayedColumns = actions ? [...columns, actionColumn] : columns;\n  return /*#__PURE__*/React.createElement(_Table, {\n    rowKey: \"number\",\n    dataSource: data,\n    columns: displayedColumns,\n    pagination: {\n      hideOnSinglePage: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default AppointmentsTable;","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/layout/components/appointmentsTable/AppointmentsTable.tsx"],"names":["React","AppointmentImg","img","isData","startsWith","isWithPath","window","location","origin","columns","key","title","dataIndex","render","sorter","a","b","name","email","color","fontSize","date","appointment","fromTo","phone","AppointmentsTable","data","actions","actionColumn","displayedColumns","hideOnSinglePage"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\n\nimport { Avatar, Table } from 'antd';\n\nimport { ColumnProps } from 'antd/es/table';\nimport { IAppointment } from '../../../interfaces/patient';\n\nconst AppointmentImg = ({ img }) => {\n  const isData = img.startsWith('data:image');\n  const isWithPath = img.startsWith('http');\n\n  if (isData || isWithPath) {\n    return <Avatar size={40} src={img} />;\n  }\n\n  return <Avatar size={40} src={`${window.location.origin}/${img}`} />;\n};\n\nconst columns: ColumnProps<IAppointment>[] = [\n  {\n    key: 'img',\n    title: 'Photo',\n    dataIndex: 'img',\n    render: (img) => <AppointmentImg img={img} />\n  },\n  {\n    key: 'name',\n    dataIndex: 'name',\n    title: 'Name',\n    sorter: (a, b) => (a.name > b.name ? 1 : -1),\n    render: (name) => <strong>{name}</strong>\n  },\n  {\n    key: 'email',\n    dataIndex: 'email',\n    title: 'Email',\n    sorter: (a, b) => (a.email > b.email ? 1 : -1),\n    render: (email) => (\n      <span className='nowrap' style={{ color: '#336cfb' }}>\n        <span className='icofont icofont-ui-email mr-1' style={{ fontSize: 16 }} />\n        {email}\n      </span>\n    )\n  },\n  {\n    key: 'data',\n    dataIndex: 'date',\n    title: 'Date',\n    render: (date) => (\n      <span className='nowrap' style={{ color: '#a5a5a5' }}>\n        {date}\n      </span>\n    )\n  },\n  {\n    key: 'visit',\n    title: 'Visit time',\n    render: (appointment) => (\n      <span className='nowrap' style={{ color: '#a5a5a5' }}>\n        {appointment.fromTo}\n      </span>\n    )\n  },\n  {\n    key: 'number',\n    dataIndex: 'number',\n    title: 'Number',\n    render: (phone) => (\n      <span className='d-flex align-baseline nowrap' style={{ color: '#336cfb' }}>\n        <span className='icofont icofont-ui-cell-phone mr-1' style={{ fontSize: 16 }} />\n        {phone}\n      </span>\n    )\n  },\n  { key: 'doctor', title: 'Doctor', dataIndex: 'doctor' },\n  { key: 'condition', title: 'Injury/Condition', dataIndex: 'injury' },\n  {}\n];\n\ntype Props = {\n  data: IAppointment[];\n  actions?: (appointment: IAppointment) => ReactNode;\n};\n\nconst AppointmentsTable = ({ data, actions }: Props) => {\n  const actionColumn: ColumnProps<IAppointment> = {\n    key: 'actions',\n    title: 'Actions',\n    render: actions\n  };\n\n  const displayedColumns = actions ? [...columns, actionColumn] : columns;\n\n  return (\n    <Table\n      rowKey='number'\n      dataSource={data}\n      columns={displayedColumns}\n      pagination={{ hideOnSinglePage: true }}\n    />\n  );\n};\n\nexport default AppointmentsTable;\n"]},"metadata":{},"sourceType":"module"}