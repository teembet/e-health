{"ast":null,"code":"export default class ColorUtils {\n  static getColorType(color) {\n    if (color.startsWith('#')) {\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color) ? 'hex' : 'invalid';\n    } else if (color.startsWith('rgb')) {\n      return 'rgb';\n    }\n\n    return 'invalid';\n  }\n\n  static hexToRgb(hex) {\n    const RGB = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return RGB ? [parseInt(RGB[1], 16), parseInt(RGB[2], 16), parseInt(RGB[3], 16)] : null;\n  }\n\n  static rgbToHex(r, g, b) {\n    return '#' + [r, g, b].map(x => {\n      const HEX = x.toString(16);\n      return HEX.length === 1 ? '0' + HEX : HEX;\n    }).join('');\n  }\n\n  static hsvToRgb(h, s, v) {\n    let r = 0,\n        g = 0,\n        b = 0;\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n  }\n\n  static rgbToHsv(r, g, b) {\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    const d = max - min;\n    const s = max === 0 ? 0 : d / max;\n    const v = max / 255;\n\n    switch (max) {\n      case min:\n        h = 0;\n        break;\n\n      case r:\n        h = g - b + d * (g < b ? 6 : 0);\n        h /= 6 * d;\n        break;\n\n      case g:\n        h = b - r + d * 2;\n        h /= 6 * d;\n        break;\n\n      case b:\n        h = r - g + d * 4;\n        h /= 6 * d;\n        break;\n    }\n\n    return [h, s, v];\n  }\n\n  static checkContrastColor(r, g, b) {\n    let color;\n\n    if (r * 0.299 + g * 0.587 + b * 0.114 > 186) {\n      color = '#2e2427';\n    } else {\n      color = '#ffffff';\n    }\n\n    return color;\n  }\n\n}","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/utils/color-utils.ts"],"names":["ColorUtils","getColorType","color","startsWith","test","hexToRgb","hex","RGB","exec","parseInt","rgbToHex","r","g","b","map","x","HEX","toString","length","join","hsvToRgb","h","s","v","i","Math","floor","f","p","q","t","round","rgbToHsv","max","min","d","checkContrastColor"],"mappings":"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","sourcesContent":["export default class ColorUtils {\n  static getColorType(color: string): 'hex' | 'rgb' | 'invalid' {\n    if (color.startsWith('#')) {\n      return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color)\n        ? 'hex'\n        : 'invalid';\n    } else if (color.startsWith('rgb')) {\n      return 'rgb';\n    }\n\n    return 'invalid';\n  }\n\n  static hexToRgb(hex: string) {\n    const RGB = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    return RGB\n      ? [parseInt(RGB[1], 16), parseInt(RGB[2], 16), parseInt(RGB[3], 16)]\n      : null;\n  }\n\n  static rgbToHex(r: number, g: number, b: number): string {\n    return (\n      '#' +\n      [r, g, b]\n        .map(x => {\n          const HEX = x.toString(16);\n          return HEX.length === 1 ? '0' + HEX : HEX;\n        })\n        .join('')\n    );\n  }\n\n  static hsvToRgb(h: number, s: number, v: number): Array<number> {\n    let r: number = 0,\n      g: number = 0,\n      b: number = 0;\n\n    const i: number = Math.floor(h * 6);\n    const f: number = h * 6 - i;\n    const p: number = v * (1 - s);\n    const q: number = v * (1 - f * s);\n    const t: number = v * (1 - (1 - f) * s);\n\n    switch (i % 6) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n  }\n\n  static rgbToHsv(r: number, g: number, b: number): Array<number> {\n    const max: number = Math.max(r, g, b);\n    const min: number = Math.min(r, g, b);\n\n    let h: number = 0;\n\n    const d: number = max - min;\n    const s: number = max === 0 ? 0 : d / max;\n    const v: number = max / 255;\n\n    switch (max) {\n      case min:\n        h = 0;\n        break;\n      case r:\n        h = g - b + d * (g < b ? 6 : 0);\n        h /= 6 * d;\n        break;\n      case g:\n        h = b - r + d * 2;\n        h /= 6 * d;\n        break;\n      case b:\n        h = r - g + d * 4;\n        h /= 6 * d;\n        break;\n    }\n    return [h, s, v];\n  }\n\n  static checkContrastColor(r: number, g: number, b: number): string {\n    let color: string;\n    if (r * 0.299 + g * 0.587 + b * 0.114 > 186) {\n      color = '#2e2427';\n    } else {\n      color = '#ffffff';\n    }\n    return color;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}