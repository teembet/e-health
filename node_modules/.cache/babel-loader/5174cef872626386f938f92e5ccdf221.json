{"ast":null,"code":"var _jsxFileName = \"/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/pages/charts/recharts/charts/PercentAreaChart.tsx\";\nimport React from 'react';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nconst data = [{\n  month: '2015.01',\n  a: 4000,\n  b: 2400,\n  c: 2400\n}, {\n  month: '2015.02',\n  a: 3000,\n  b: 1398,\n  c: 2210\n}, {\n  month: '2015.03',\n  a: 2000,\n  b: 9800,\n  c: 2290\n}, {\n  month: '2015.04',\n  a: 2780,\n  b: 3908,\n  c: 2000\n}, {\n  month: '2015.05',\n  a: 1890,\n  b: 4800,\n  c: 2181\n}, {\n  month: '2015.06',\n  a: 2390,\n  b: 3800,\n  c: 2500\n}, {\n  month: '2015.07',\n  a: 3490,\n  b: 4300,\n  c: 2100\n}];\n\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = function (decimal) {\n  let fixed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return `${(decimal * 100).toFixed(fixed)}%`;\n};\n\nconst renderTooltipContent = o => {\n  const {\n    payload,\n    label\n  } = o;\n  const total = payload.reduce((result, entry) => result + entry.value, 0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"customized-tooltip-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"total\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, `${label} (Total: ${total})`), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, payload.map((entry, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: `item-${index}`,\n    style: {\n      color: entry.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, `${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`))));\n};\n\nconst PercentAreaChart = () => {\n  return /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    height: 300,\n    width: '100%',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AreaChart, {\n    width: 500,\n    height: 400,\n    data: data,\n    stackOffset: \"expand\",\n    margin: {\n      top: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"month\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    tickFormatter: toPercent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    content: renderTooltipContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"a\",\n    stackId: \"1\",\n    stroke: \"#8884d8\",\n    fill: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"b\",\n    stackId: \"1\",\n    stroke: \"#82ca9d\",\n    fill: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"c\",\n    stackId: \"1\",\n    stroke: \"#ffc658\",\n    fill: \"#ffc658\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default PercentAreaChart;","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/pages/charts/recharts/charts/PercentAreaChart.tsx"],"names":["React","ResponsiveContainer","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","data","month","a","b","c","getPercent","value","total","ratio","toPercent","decimal","fixed","toFixed","renderTooltipContent","o","payload","label","reduce","result","entry","map","index","color","name","PercentAreaChart","top"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip\n} from 'recharts';\n\nconst data = [\n  {\n    month: '2015.01',\n    a: 4000,\n    b: 2400,\n    c: 2400\n  },\n  {\n    month: '2015.02',\n    a: 3000,\n    b: 1398,\n    c: 2210\n  },\n  {\n    month: '2015.03',\n    a: 2000,\n    b: 9800,\n    c: 2290\n  },\n  {\n    month: '2015.04',\n    a: 2780,\n    b: 3908,\n    c: 2000\n  },\n  {\n    month: '2015.05',\n    a: 1890,\n    b: 4800,\n    c: 2181\n  },\n  {\n    month: '2015.06',\n    a: 2390,\n    b: 3800,\n    c: 2500\n  },\n  {\n    month: '2015.07',\n    a: 3490,\n    b: 4300,\n    c: 2100\n  }\n];\nconst getPercent = (value, total) => {\n  const ratio = total > 0 ? value / total : 0;\n\n  return toPercent(ratio, 2);\n};\n\nconst toPercent = (decimal, fixed = 0) => `${(decimal * 100).toFixed(fixed)}%`;\nconst renderTooltipContent = o => {\n  const { payload, label } = o;\n  const total = payload.reduce((result, entry) => result + entry.value, 0);\n\n  return (\n    <div className='customized-tooltip-content'>\n      <p className='total'>{`${label} (Total: ${total})`}</p>\n      <ul className='list'>\n        {payload.map((entry, index) => (\n          <li key={`item-${index}`} style={{ color: entry.color }}>\n            {`${entry.name}: ${entry.value}(${getPercent(entry.value, total)})`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst PercentAreaChart = () => {\n  return (\n    <ResponsiveContainer height={300} width={'100%'}>\n      <AreaChart\n        width={500}\n        height={400}\n        data={data}\n        stackOffset='expand'\n        margin={{\n          top: 10\n        }}>\n        <CartesianGrid strokeDasharray='3 3' />\n        <XAxis dataKey='month' />\n        <YAxis tickFormatter={toPercent} />\n        <Tooltip content={renderTooltipContent} />\n        <Area type='monotone' dataKey='a' stackId='1' stroke='#8884d8' fill='#8884d8' />\n        <Area type='monotone' dataKey='b' stackId='1' stroke='#82ca9d' fill='#82ca9d' />\n        <Area type='monotone' dataKey='c' stackId='1' stroke='#ffc658' fill='#ffc658' />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default PercentAreaChart;\n"]},"metadata":{},"sourceType":"module"}