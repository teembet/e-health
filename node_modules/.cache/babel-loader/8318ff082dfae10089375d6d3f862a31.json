{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nvar _jsxFileName = \"/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/pages/tables/FilterAndSorting.tsx\";\nimport React from 'react';\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  filters: [{\n    text: 'Joe',\n    value: 'Joe'\n  }, {\n    text: 'Jim',\n    value: 'Jim'\n  }, {\n    text: 'Submenu',\n    value: 'Submenu',\n    children: [{\n      text: 'Green',\n      value: 'Green'\n    }, {\n      text: 'Black',\n      value: 'Black'\n    }]\n  }],\n  // specify the condition of filtering result\n  // here is that finding the name started with `value`\n  onFilter: (value, record) => record.name.indexOf(value) === 0,\n  sorter: (a, b) => a.name.length - b.name.length,\n  sortDirections: ['descend', 'ascend']\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  defaultSortOrder: 'descend',\n  sorter: (a, b) => a.age - b.age\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  filters: [{\n    text: 'London',\n    value: 'London'\n  }, {\n    text: 'New York',\n    value: 'New York'\n  }],\n  filterMultiple: false,\n  onFilter: (value, record) => record.address.indexOf(value) === 0,\n  sorter: (a, b) => a.address.length - b.address.length,\n  sortDirections: ['descend', 'ascend']\n}];\nconst data = [{\n  key: '1',\n  name: 'John Brown',\n  age: 32,\n  address: 'New York No. 1 Lake Park'\n}, {\n  key: '2',\n  name: 'Jim Green',\n  age: 42,\n  address: 'London No. 1 Lake Park'\n}, {\n  key: '3',\n  name: 'Joe Black',\n  age: 32,\n  address: 'Sidney No. 1 Lake Park'\n}, {\n  key: '4',\n  name: 'Jim Red',\n  age: 32,\n  address: 'London No. 2 Lake Park'\n}];\n\nconst FilterAndSorting = () => {\n  return /*#__PURE__*/React.createElement(_Table, {\n    pagination: false,\n    columns: columns,\n    dataSource: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default FilterAndSorting;","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/pages/tables/FilterAndSorting.tsx"],"names":["React","columns","title","dataIndex","filters","text","value","children","onFilter","record","name","indexOf","sorter","a","b","length","sortDirections","defaultSortOrder","age","filterMultiple","address","data","key","FilterAndSorting"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,OAAY,GAAG,CACnB;AACEC,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,SAAS,EAAE,MAFb;AAGEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO,EASP;AACED,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,KAAK,EAAE,SAFT;AAGEC,IAAAA,QAAQ,EAAE,CACR;AACEF,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,KAAK,EAAE;AAFT,KADQ,EAKR;AACED,MAAAA,IAAI,EAAE,OADR;AAEEC,MAAAA,KAAK,EAAE;AAFT,KALQ;AAHZ,GATO,CAHX;AA2BE;AACA;AACAE,EAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmBA,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoBL,KAApB,MAA+B,CA7B9D;AA8BEM,EAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACH,IAAF,CAAOK,MAAP,GAAgBD,CAAC,CAACJ,IAAF,CAAOK,MA9B3C;AA+BEC,EAAAA,cAAc,EAAE,CAAC,SAAD,EAAY,QAAZ;AA/BlB,CADmB,EAkCnB;AACEd,EAAAA,KAAK,EAAE,KADT;AAEEC,EAAAA,SAAS,EAAE,KAFb;AAGEc,EAAAA,gBAAgB,EAAE,SAHpB;AAIEL,EAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACK,GAAF,GAAQJ,CAAC,CAACI;AAJ9B,CAlCmB,EAwCnB;AACEhB,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,SAAS,EAAE,SAFb;AAGEC,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,KAAK,EAAE;AAFT,GADO,EAKP;AACED,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,KAAK,EAAE;AAFT,GALO,CAHX;AAaEa,EAAAA,cAAc,EAAE,KAblB;AAcEX,EAAAA,QAAQ,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmBA,MAAM,CAACW,OAAP,CAAeT,OAAf,CAAuBL,KAAvB,MAAkC,CAdjE;AAeEM,EAAAA,MAAM,EAAE,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACO,OAAF,CAAUL,MAAV,GAAmBD,CAAC,CAACM,OAAF,CAAUL,MAfjD;AAgBEC,EAAAA,cAAc,EAAE,CAAC,SAAD,EAAY,QAAZ;AAhBlB,CAxCmB,CAArB;AA4DA,MAAMK,IAAI,GAAG,CACX;AACEC,EAAAA,GAAG,EAAE,GADP;AAEEZ,EAAAA,IAAI,EAAE,YAFR;AAGEQ,EAAAA,GAAG,EAAE,EAHP;AAIEE,EAAAA,OAAO,EAAE;AAJX,CADW,EAOX;AACEE,EAAAA,GAAG,EAAE,GADP;AAEEZ,EAAAA,IAAI,EAAE,WAFR;AAGEQ,EAAAA,GAAG,EAAE,EAHP;AAIEE,EAAAA,OAAO,EAAE;AAJX,CAPW,EAaX;AACEE,EAAAA,GAAG,EAAE,GADP;AAEEZ,EAAAA,IAAI,EAAE,WAFR;AAGEQ,EAAAA,GAAG,EAAE,EAHP;AAIEE,EAAAA,OAAO,EAAE;AAJX,CAbW,EAmBX;AACEE,EAAAA,GAAG,EAAE,GADP;AAEEZ,EAAAA,IAAI,EAAE,SAFR;AAGEQ,EAAAA,GAAG,EAAE,EAHP;AAIEE,EAAAA,OAAO,EAAE;AAJX,CAnBW,CAAb;;AA2BA,MAAMG,gBAAgB,GAAG,MAAM;AAC7B,sBAAO;AAAO,IAAA,UAAU,EAAE,KAAnB;AAA0B,IAAA,OAAO,EAAEtB,OAAnC;AAA4C,IAAA,UAAU,EAAEoB,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFD;;AAIA,eAAeE,gBAAf","sourcesContent":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns: any = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    filters: [\n      {\n        text: 'Joe',\n        value: 'Joe'\n      },\n      {\n        text: 'Jim',\n        value: 'Jim'\n      },\n      {\n        text: 'Submenu',\n        value: 'Submenu',\n        children: [\n          {\n            text: 'Green',\n            value: 'Green'\n          },\n          {\n            text: 'Black',\n            value: 'Black'\n          }\n        ]\n      }\n    ],\n    // specify the condition of filtering result\n    // here is that finding the name started with `value`\n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend', 'ascend']\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.age - b.age\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    filters: [\n      {\n        text: 'London',\n        value: 'London'\n      },\n      {\n        text: 'New York',\n        value: 'New York'\n      }\n    ],\n    filterMultiple: false,\n    onFilter: (value, record) => record.address.indexOf(value) === 0,\n    sorter: (a, b) => a.address.length - b.address.length,\n    sortDirections: ['descend', 'ascend']\n  }\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park'\n  }\n];\n\nconst FilterAndSorting = () => {\n  return <Table pagination={false} columns={columns} dataSource={data} />;\n};\n\nexport default FilterAndSorting;\n"]},"metadata":{},"sourceType":"module"}