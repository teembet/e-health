{"ast":null,"code":"import _regeneratorRuntime from\"/Users/Timbet.Ekanem/Downloads/e-health/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/Timbet.Ekanem/Downloads/e-health/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{userConstants}from'./types';import{alertActions}from'../alert/action';export function login(payload){// return the promise using fetch which adds to localstorage on resolve\nvar user=payload;function request(user){return{type:userConstants.LOGIN_REQUEST,user:user};}function success(user){return{type:userConstants.LOGIN_SUCCESS,user:user};}function failure(error){return{type:userConstants.LOGIN_FAILURE,error:error};}return/*#__PURE__*/function(){var _dispatch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(request(user));try{dispatch(alertActions.success(\"working\"));// const res = await userService.login(username, password);\ndispatch(success(user));}catch(err){console.log(err);dispatch(alertActions.error(err));dispatch(failure(err));}case 2:case\"end\":return _context.stop();}}},_callee);}));function dispatch(_x){return _dispatch.apply(this,arguments);}return dispatch;}();}export function register(user){// return the promise using fetch which dispatches appropriately \nfunction request(user){return{type:userConstants.REGISTER_REQUEST,payload:user};}function success(user){return{type:userConstants.REGISTER_SUCCESS,payload:user};}function failure(error){return{type:userConstants.REGISTER_FAILURE,error:error};}return/*#__PURE__*/function(){var _dispatch2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// dispatch(request(user));\ntry{// const res = await userService.register(user);\ndispatch(success(user));// dispatch(alertActions.success(\"Registration successful\"))\n}catch(err){// console.log(err);\n// dispatch(alertActions.error(err))\n// dispatch(failure(err));\n}case 1:case\"end\":return _context2.stop();}}},_callee2);}));function dispatch(_x2){return _dispatch2.apply(this,arguments);}return dispatch;}();}export var createUser=function createUser(payload){return{type:userConstants.USER_SAVE,payload:payload};};var logout=function logout(){// complete this function\n// userService.logout()\nreturn{type:userConstants.LOGOUT};};//   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/actions.ts"],"names":["userConstants","alertActions","login","payload","user","request","type","LOGIN_REQUEST","success","LOGIN_SUCCESS","failure","error","LOGIN_FAILURE","dispatch","err","console","log","register","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","createUser","USER_SAVE","logout","LOGOUT"],"mappings":"2UAAA,OAAQA,aAAR,KAA4B,SAA5B,CAEA,OAASC,YAAT,KAA6B,iBAA7B,CAOA,MAAO,SAASC,CAAAA,KAAT,CAAeC,OAAf,CAAwB,CAC3B;AACA,GAAMC,CAAAA,IAAI,CAAGD,OAAb,CAEA,QAASE,CAAAA,OAAT,CAAiBD,IAAjB,CAAuB,CAAE,MAAO,CAAEE,IAAI,CAAEN,aAAa,CAACO,aAAtB,CAAqCH,IAAI,CAAJA,IAArC,CAAP,CAAoD,CAC7E,QAASI,CAAAA,OAAT,CAAiBJ,IAAjB,CAAuB,CAAE,MAAO,CAAEE,IAAI,CAAEN,aAAa,CAACS,aAAtB,CAAqCL,IAAI,CAAJA,IAArC,CAAP,CAAoD,CAC7E,QAASM,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,CAAE,MAAO,CAAEL,IAAI,CAAEN,aAAa,CAACY,aAAtB,CAAqCD,KAAK,CAALA,KAArC,CAAP,CAAqD,CAE/E,oGAAO,iBAAwBE,QAAxB,kHACHA,QAAQ,CAACR,OAAO,CAACD,IAAD,CAAR,CAAR,CACA,GAAI,CAGAS,QAAQ,CAACZ,YAAY,CAACO,OAAb,CAAqB,SAArB,CAAD,CAAR,CAEA;AACAK,QAAQ,CAACL,OAAO,CAACJ,IAAD,CAAR,CAAR,CACH,CAAC,MAAOU,GAAP,CAAY,CACVC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAD,QAAQ,CAACZ,YAAY,CAACU,KAAb,CAAmBG,GAAnB,CAAD,CAAR,CACAD,QAAQ,CAACH,OAAO,CAACI,GAAD,CAAR,CAAR,CACH,CAbE,sDAAP,WAAsBD,CAAAA,QAAtB,mDAAsBA,CAAAA,QAAtB,KAeH,CAGD,MAAO,SAASI,CAAAA,QAAT,CAAkBb,IAAlB,CAA4B,CAC/B;AACA,QAASC,CAAAA,OAAT,CAAiBD,IAAjB,CAAuB,CAAE,MAAO,CAAEE,IAAI,CAAEN,aAAa,CAACkB,gBAAtB,CAAwCf,OAAO,CAACC,IAAhD,CAAP,CAA+D,CACxF,QAASI,CAAAA,OAAT,CAAiBJ,IAAjB,CAAuB,CAAE,MAAO,CAAEE,IAAI,CAAEN,aAAa,CAACmB,gBAAtB,CAAwChB,OAAO,CAACC,IAAhD,CAAP,CAA+D,CACxF,QAASM,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,CAAE,MAAO,CAAEL,IAAI,CAAEN,aAAa,CAACoB,gBAAtB,CAAwCT,KAAK,CAALA,KAAxC,CAAP,CAAwD,CAElF,qGAAO,kBAAwBE,QAAxB,sHACH;AACA,GAAI,CAKA;AACAA,QAAQ,CAACL,OAAO,CAACJ,IAAD,CAAR,CAAR,CAEA;AACH,CAAC,MAAOU,GAAP,CAAY,CACV;AACA;AACA;AACH,CAfE,wDAAP,WAAsBD,CAAAA,QAAtB,qDAAsBA,CAAAA,QAAtB,KAkBH,CAED,MAAO,IAAMQ,CAAAA,UAAU,CAAC,QAAXA,CAAAA,UAAW,CAAAlB,OAAO,CAAE,CAE7B,MAAM,CACFG,IAAI,CAACN,aAAa,CAACsB,SADjB,CAEFnB,OAAO,CAAPA,OAFE,CAAN,CAIH,CANM,CASP,GAAOoB,CAAAA,MAAM,CAAC,QAAPA,CAAAA,MAAO,EAAK,CACf;AACA;AACA,MAAO,CACHjB,IAAI,CAAEN,aAAa,CAACwB,MADjB,CAAP,CAGH,CAND,CAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {userConstants} from './types';\nimport axios from 'axios';\nimport { alertActions } from '../alert/action';\n\n\n\n  \n\n  \nexport function login(payload) {\n    // return the promise using fetch which adds to localstorage on resolve\n    const user = payload\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        dispatch(request(user));\n        try {\n           \n            \n            dispatch(alertActions.success(\"working\"))\n        \n            // const res = await userService.login(username, password);\n            dispatch(success(user));\n        } catch (err) {\n            console.log(err);\n            dispatch(alertActions.error(err))\n            dispatch(failure(err));\n        }\n    }\n}\n  \n\nexport function register(user:any) {\n    // return the promise using fetch which dispatches appropriately \n    function request(user) { return { type: userConstants.REGISTER_REQUEST, payload:user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, payload:user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        // dispatch(request(user));\n        try {\n\n\n           \n\n            // const res = await userService.register(user);\n            dispatch(success(user));\n       \n            // dispatch(alertActions.success(\"Registration successful\"))\n        } catch (err) {\n            // console.log(err);\n            // dispatch(alertActions.error(err))\n            // dispatch(failure(err));\n        }\n    }\n\n}\n\nexport const createUser=payload=>{\n   \n    return{\n        type:userConstants.USER_SAVE,\n        payload\n    }\n}\n\n\nconst  logout=()=> {\n    // complete this function\n    // userService.logout()\n    return {\n        type: userConstants.LOGOUT\n    }\n}\n  \n//   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n  \n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };\n  "]},"metadata":{},"sourceType":"module"}