{"ast":null,"code":"import _toConsumableArray from\"/Users/Timbet.Ekanem/Downloads/e-health/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/Timbet.Ekanem/Downloads/e-health/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{userConstants}from'./types';export function login(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case userConstants.LOGIN_REQUEST:return{user:action.user};case userConstants.LOGIN_SUCCESS:return{user:action.user};case userConstants.LOGIN_FAILURE:return{};case userConstants.LOGOUT:return{};default:return state;}}// export function user(state = [], action) {\n//   switch (action.type) {\n//     case userConstants.USER_SAVE:\n//       const id = getNewId(state);\n//       return  [ {...action.payload,id} , ...state]\n//       ;\n//     // case userConstants.LOGIN_SUCCESS:\n//     //   return {\n//     //     loggedIn: true,\n//     //     user: action.user\n//     //   };\n//     // case userConstants.LOGIN_FAILURE:\n//     //   return {};\n//     // case userConstants.LOGOUT:\n//     //   return {};\n//     default:\n//       return state\n//   }\n// }\nexport function registration(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case userConstants.REGISTER_REQUEST:return _objectSpread(_objectSpread({},state),action.payload);case userConstants.REGISTER_SUCCESS:var id=getNewId(state);return[_objectSpread(_objectSpread({},action.payload),{},{id:id})].concat(_toConsumableArray(state));case userConstants.REGISTER_FAILURE:return _objectSpread(_objectSpread({},state),{},{registering:false});default:return state;}}function getNewId(patients){return patients.map(function(patient){return patient.id;}).map(function(id){return parseInt(id);}).reduce(function(largest,id){return Math.max(largest,id+1);},-1).toString();}","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/reducers.ts"],"names":["userConstants","login","state","action","type","LOGIN_REQUEST","user","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","registration","REGISTER_REQUEST","payload","REGISTER_SUCCESS","id","getNewId","REGISTER_FAILURE","registering","patients","map","patient","parseInt","reduce","largest","Math","max","toString"],"mappings":"qVACA,OAAQA,aAAR,KAA4B,SAA5B,CAEI,MAAO,SAASC,CAAAA,KAAT,EAAmC,IAApBC,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CACxC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKJ,CAAAA,aAAa,CAACK,aAAnB,CACE,MAAO,CAELC,IAAI,CAAEH,MAAM,CAACG,IAFR,CAAP,CAIF,IAAKN,CAAAA,aAAa,CAACO,aAAnB,CACE,MAAO,CAELD,IAAI,CAAEH,MAAM,CAACG,IAFR,CAAP,CAIF,IAAKN,CAAAA,aAAa,CAACQ,aAAnB,CACE,MAAO,EAAP,CACF,IAAKR,CAAAA,aAAa,CAACS,MAAnB,CACE,MAAO,EAAP,CACF,QACE,MAAOP,CAAAA,KAAP,CAhBJ,CAkBD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA,MAAO,SAASQ,CAAAA,YAAT,EAA0C,IAApBR,CAAAA,KAAoB,2DAAZ,EAAY,IAARC,CAAAA,MAAQ,2CAE7C,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKJ,CAAAA,aAAa,CAACW,gBAAnB,CAEE,sCAAYT,KAAZ,EAAsBC,MAAM,CAACS,OAA7B,EAGF,IAAKZ,CAAAA,aAAa,CAACa,gBAAnB,CACE,GAAMC,CAAAA,EAAE,CAAGC,QAAQ,CAACb,KAAD,CAAnB,CAEH,sCAAeC,MAAM,CAACS,OAAtB,MAA8BE,EAAE,CAAFA,EAA9B,8BAAuCZ,KAAvC,GAIC,IAAKF,CAAAA,aAAa,CAACgB,gBAAnB,CACE,sCAAYd,KAAZ,MAAmBe,WAAW,CAAE,KAAhC,GACF,QACE,MAAOf,CAAAA,KAAP,CAhBJ,CAkBD,CACP,QAASa,CAAAA,QAAT,CAAkBG,QAAlB,CAA4B,CACxB,MAAOA,CAAAA,QAAQ,CACZC,GADI,CACA,SAACC,OAAD,QAAaA,CAAAA,OAAO,CAACN,EAArB,EADA,EAEJK,GAFI,CAEA,SAACL,EAAD,QAAQO,CAAAA,QAAQ,CAACP,EAAD,CAAhB,EAFA,EAGJQ,MAHI,CAGG,SAACC,OAAD,CAAUT,EAAV,QAAiBU,CAAAA,IAAI,CAACC,GAAL,CAASF,OAAT,CAAkBT,EAAE,CAAG,CAAvB,CAAjB,EAHH,CAG+C,CAAC,CAHhD,EAIJY,QAJI,EAAP,CAKD","sourcesContent":["\nimport {userConstants} from './types';\n   \n    export function login(state = [], action) {\n      switch (action.type) {\n        case userConstants.LOGIN_REQUEST:\n          return {\n            \n            user: action.user\n          };\n        case userConstants.LOGIN_SUCCESS:\n          return {\n           \n            user: action.user\n          };\n        case userConstants.LOGIN_FAILURE:\n          return {};\n        case userConstants.LOGOUT:\n          return {};\n        default:\n          return state\n      }\n    }\n\n    // export function user(state = [], action) {\n    //   switch (action.type) {\n    //     case userConstants.USER_SAVE:\n    //       const id = getNewId(state);\n    //       return  [ {...action.payload,id} , ...state]\n    //       ;\n    //     // case userConstants.LOGIN_SUCCESS:\n    //     //   return {\n    //     //     loggedIn: true,\n    //     //     user: action.user\n    //     //   };\n    //     // case userConstants.LOGIN_FAILURE:\n    //     //   return {};\n    //     // case userConstants.LOGOUT:\n    //     //   return {};\n    //     default:\n    //       return state\n    //   }\n    // }\n\n    \n\n    export function registration(state = [], action) {\n      \n        switch (action.type) {\n          case userConstants.REGISTER_REQUEST:\n         \n            return { ...state, ...action.payload };\n\n\n          case userConstants.REGISTER_SUCCESS:\n            const id = getNewId(state);\n        \n         return   [ {...action.payload,id} , ...state];\n           \n        \n\n          case userConstants.REGISTER_FAILURE:\n            return { ...state, registering: false }\n          default:\n            return state\n        }\n      }\nfunction getNewId(patients) {\n    return patients\n      .map((patient) => patient.id)\n      .map((id) => parseInt(id))\n      .reduce((largest, id) => Math.max(largest, id + 1), -1)\n      .toString();\n  }"]},"metadata":{},"sourceType":"module"}