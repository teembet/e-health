{"ast":null,"code":"import\"antd/es/table/style\";import _Table from\"antd/es/table\";import React from'react';var columns=[{title:'Name',dataIndex:'name',filters:[{text:'Joe',value:'Joe'},{text:'Jim',value:'Jim'},{text:'Submenu',value:'Submenu',children:[{text:'Green',value:'Green'},{text:'Black',value:'Black'}]}],// specify the condition of filtering result\n// here is that finding the name started with `value`\nonFilter:function onFilter(value,record){return record.name.indexOf(value)===0;},sorter:function sorter(a,b){return a.name.length-b.name.length;},sortDirections:['descend','ascend']},{title:'Age',dataIndex:'age',defaultSortOrder:'descend',sorter:function sorter(a,b){return a.age-b.age;}},{title:'Address',dataIndex:'address',filters:[{text:'London',value:'London'},{text:'New York',value:'New York'}],filterMultiple:false,onFilter:function onFilter(value,record){return record.address.indexOf(value)===0;},sorter:function sorter(a,b){return a.address.length-b.address.length;},sortDirections:['descend','ascend']}];var data=[{key:'1',name:'John Brown',age:32,address:'New York No. 1 Lake Park'},{key:'2',name:'Jim Green',age:42,address:'London No. 1 Lake Park'},{key:'3',name:'Joe Black',age:32,address:'Sidney No. 1 Lake Park'},{key:'4',name:'Jim Red',age:32,address:'London No. 2 Lake Park'}];var FilterAndSorting=function FilterAndSorting(){return/*#__PURE__*/React.createElement(_Table,{pagination:false,columns:columns,dataSource:data});};export default FilterAndSorting;","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/pages/tables/FilterAndSorting.tsx"],"names":["React","columns","title","dataIndex","filters","text","value","children","onFilter","record","name","indexOf","sorter","a","b","length","sortDirections","defaultSortOrder","age","filterMultiple","address","data","key","FilterAndSorting"],"mappings":"8DAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,GAAMC,CAAAA,OAAY,CAAG,CACnB,CACEC,KAAK,CAAE,MADT,CAEEC,SAAS,CAAE,MAFb,CAGEC,OAAO,CAAE,CACP,CACEC,IAAI,CAAE,KADR,CAEEC,KAAK,CAAE,KAFT,CADO,CAKP,CACED,IAAI,CAAE,KADR,CAEEC,KAAK,CAAE,KAFT,CALO,CASP,CACED,IAAI,CAAE,SADR,CAEEC,KAAK,CAAE,SAFT,CAGEC,QAAQ,CAAE,CACR,CACEF,IAAI,CAAE,OADR,CAEEC,KAAK,CAAE,OAFT,CADQ,CAKR,CACED,IAAI,CAAE,OADR,CAEEC,KAAK,CAAE,OAFT,CALQ,CAHZ,CATO,CAHX,CA2BE;AACA;AACAE,QAAQ,CAAE,kBAACF,KAAD,CAAQG,MAAR,QAAmBA,CAAAA,MAAM,CAACC,IAAP,CAAYC,OAAZ,CAAoBL,KAApB,IAA+B,CAAlD,EA7BZ,CA8BEM,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACH,IAAF,CAAOK,MAAP,CAAgBD,CAAC,CAACJ,IAAF,CAAOK,MAAjC,EA9BV,CA+BEC,cAAc,CAAE,CAAC,SAAD,CAAY,QAAZ,CA/BlB,CADmB,CAkCnB,CACEd,KAAK,CAAE,KADT,CAEEC,SAAS,CAAE,KAFb,CAGEc,gBAAgB,CAAE,SAHpB,CAIEL,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACK,GAAF,CAAQJ,CAAC,CAACI,GAApB,EAJV,CAlCmB,CAwCnB,CACEhB,KAAK,CAAE,SADT,CAEEC,SAAS,CAAE,SAFb,CAGEC,OAAO,CAAE,CACP,CACEC,IAAI,CAAE,QADR,CAEEC,KAAK,CAAE,QAFT,CADO,CAKP,CACED,IAAI,CAAE,UADR,CAEEC,KAAK,CAAE,UAFT,CALO,CAHX,CAaEa,cAAc,CAAE,KAblB,CAcEX,QAAQ,CAAE,kBAACF,KAAD,CAAQG,MAAR,QAAmBA,CAAAA,MAAM,CAACW,OAAP,CAAeT,OAAf,CAAuBL,KAAvB,IAAkC,CAArD,EAdZ,CAeEM,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACO,OAAF,CAAUL,MAAV,CAAmBD,CAAC,CAACM,OAAF,CAAUL,MAAvC,EAfV,CAgBEC,cAAc,CAAE,CAAC,SAAD,CAAY,QAAZ,CAhBlB,CAxCmB,CAArB,CA4DA,GAAMK,CAAAA,IAAI,CAAG,CACX,CACEC,GAAG,CAAE,GADP,CAEEZ,IAAI,CAAE,YAFR,CAGEQ,GAAG,CAAE,EAHP,CAIEE,OAAO,CAAE,0BAJX,CADW,CAOX,CACEE,GAAG,CAAE,GADP,CAEEZ,IAAI,CAAE,WAFR,CAGEQ,GAAG,CAAE,EAHP,CAIEE,OAAO,CAAE,wBAJX,CAPW,CAaX,CACEE,GAAG,CAAE,GADP,CAEEZ,IAAI,CAAE,WAFR,CAGEQ,GAAG,CAAE,EAHP,CAIEE,OAAO,CAAE,wBAJX,CAbW,CAmBX,CACEE,GAAG,CAAE,GADP,CAEEZ,IAAI,CAAE,SAFR,CAGEQ,GAAG,CAAE,EAHP,CAIEE,OAAO,CAAE,wBAJX,CAnBW,CAAb,CA2BA,GAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,mBAAO,4BAAO,UAAU,CAAE,KAAnB,CAA0B,OAAO,CAAEtB,OAAnC,CAA4C,UAAU,CAAEoB,IAAxD,EAAP,CACD,CAFD,CAIA,cAAeE,CAAAA,gBAAf","sourcesContent":["import React from 'react';\nimport { Table } from 'antd';\n\nconst columns: any = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    filters: [\n      {\n        text: 'Joe',\n        value: 'Joe'\n      },\n      {\n        text: 'Jim',\n        value: 'Jim'\n      },\n      {\n        text: 'Submenu',\n        value: 'Submenu',\n        children: [\n          {\n            text: 'Green',\n            value: 'Green'\n          },\n          {\n            text: 'Black',\n            value: 'Black'\n          }\n        ]\n      }\n    ],\n    // specify the condition of filtering result\n    // here is that finding the name started with `value`\n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend', 'ascend']\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.age - b.age\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    filters: [\n      {\n        text: 'London',\n        value: 'London'\n      },\n      {\n        text: 'New York',\n        value: 'New York'\n      }\n    ],\n    filterMultiple: false,\n    onFilter: (value, record) => record.address.indexOf(value) === 0,\n    sorter: (a, b) => a.address.length - b.address.length,\n    sortDirections: ['descend', 'ascend']\n  }\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park'\n  }\n];\n\nconst FilterAndSorting = () => {\n  return <Table pagination={false} columns={columns} dataSource={data} />;\n};\n\nexport default FilterAndSorting;\n"]},"metadata":{},"sourceType":"module"}