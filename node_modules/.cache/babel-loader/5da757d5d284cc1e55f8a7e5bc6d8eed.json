{"ast":null,"code":"import { userConstants } from './types';\nexport function login(username, password) {\n  // return the promise using fetch which adds to localstorage on resolve\n  const user = {\n    username,\n    password\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n\n  return async function dispatch(dispatch) {\n    dispatch(request(user));\n\n    try {\n      console.log(\"action\", user); // const res = await userService.login(username, password);\n\n      dispatch(success(user));\n    } catch (err) {\n      console.log(err);\n      dispatch(failure(err));\n    }\n  };\n}\nexport function register(user) {\n  // return the promise using fetch which dispatches appropriately \n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n\n  return async function dispatch(dispatch) {\n    dispatch(request(user));\n\n    try {// const res = await userService.register(user);\n      // dispatch(success(res));\n      // dispatch(alertActions.success(\"Registration successful\"))\n    } catch (err) {// console.log(err);\n      // dispatch(alertActions.error(err))\n      // dispatch(failure(err));\n    }\n  };\n}\n\nfunction logout() {\n  // complete this function\n  // userService.logout()\n  return {\n    type: userConstants.LOGOUT\n  };\n} //   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/actions.ts"],"names":["userConstants","login","username","password","user","request","type","LOGIN_REQUEST","success","LOGIN_SUCCESS","failure","error","LOGIN_FAILURE","dispatch","console","log","err","register","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","logout","LOGOUT"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,SAA5B;AASA,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AACtC;AACA,QAAMC,IAAI,GAAG;AAAEF,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAb;;AAEA,WAASE,OAAT,CAAiBD,IAAjB,EAAuB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEN,aAAa,CAACO,aAAtB;AAAqCH,MAAAA,IAAI,EAACA;AAA1C,KAAP;AAAyD;;AAClF,WAASI,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEN,aAAa,CAACS,aAAtB;AAAqCL,MAAAA,IAAI,EAACA;AAA1C,KAAP;AAAyD;;AAClF,WAASM,OAAT,CAAiBC,KAAjB,EAAwB;AAAE,WAAO;AAAEL,MAAAA,IAAI,EAAEN,aAAa,CAACY,aAAtB;AAAqCD,MAAAA;AAArC,KAAP;AAAqD;;AAE/E,SAAO,eAAeE,QAAf,CAAwBA,QAAxB,EAAkC;AACrCA,IAAAA,QAAQ,CAACR,OAAO,CAACD,IAAD,CAAR,CAAR;;AACA,QAAI;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBX,IAArB,EADA,CAEA;;AACAS,MAAAA,QAAQ,CAACL,OAAO,CAACJ,IAAD,CAAR,CAAR;AACH,KAJD,CAIE,OAAOY,GAAP,EAAY;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AAEAH,MAAAA,QAAQ,CAACH,OAAO,CAACM,GAAD,CAAR,CAAR;AACH;AACJ,GAXD;AAYH;AAGD,OAAO,SAASC,QAAT,CAAkBb,IAAlB,EAAwB;AAC3B;AACA,WAASC,OAAT,CAAiBD,IAAjB,EAAuB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEN,aAAa,CAACkB,gBAAtB;AAAwCd,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASI,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEE,MAAAA,IAAI,EAAEN,aAAa,CAACmB,gBAAtB;AAAwCf,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASM,OAAT,CAAiBC,KAAjB,EAAwB;AAAE,WAAO;AAAEL,MAAAA,IAAI,EAAEN,aAAa,CAACoB,gBAAtB;AAAwCT,MAAAA;AAAxC,KAAP;AAAwD;;AAElF,SAAO,eAAeE,QAAf,CAAwBA,QAAxB,EAAkC;AACrCA,IAAAA,QAAQ,CAACR,OAAO,CAACD,IAAD,CAAR,CAAR;;AACA,QAAI,CACA;AACA;AACA;AACH,KAJD,CAIE,OAAOY,GAAP,EAAY,CACV;AACA;AACA;AACH;AACJ,GAXD;AAaH;;AAGD,SAASK,MAAT,GAAkB;AACd;AACA;AACA,SAAO;AACHf,IAAAA,IAAI,EAAEN,aAAa,CAACsB;AADjB,GAAP;AAGH,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {userConstants} from './types';\nimport axios from 'axios';\n  \n\n\n\n  \n\n  \nexport function login(username, password) {\n    // return the promise using fetch which adds to localstorage on resolve\n    const user = { username, password }\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user:user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user:user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        dispatch(request(user));\n        try {\n            console.log(\"action\",user)\n            // const res = await userService.login(username, password);\n            dispatch(success(user));\n        } catch (err) {\n            console.log(err);\n          \n            dispatch(failure(err));\n        }\n    }\n}\n  \n\nexport function register(user) {\n    // return the promise using fetch which dispatches appropriately \n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        dispatch(request(user));\n        try {\n            // const res = await userService.register(user);\n            // dispatch(success(res));\n            // dispatch(alertActions.success(\"Registration successful\"))\n        } catch (err) {\n            // console.log(err);\n            // dispatch(alertActions.error(err))\n            // dispatch(failure(err));\n        }\n    }\n\n}\n\n\nfunction logout() {\n    // complete this function\n    // userService.logout()\n    return {\n        type: userConstants.LOGOUT\n    }\n}\n  \n//   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n  \n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };\n  "]},"metadata":{},"sourceType":"module"}