{"ast":null,"code":"import { userConstants } from './types';\nimport { alertActions } from '../alert/action';\nexport function login(payload) {\n  // return the promise using fetch which adds to localstorage on resolve\n  const user = payload;\n  console.log(user, tt);\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n\n  return async function dispatch(dispatch) {\n    dispatch(request(user));\n\n    try {\n      dispatch(alertActions.success(\"working\")); // const res = await userService.login(username, password);\n\n      dispatch(success(user));\n    } catch (err) {\n      console.log(err);\n      dispatch(alertActions.error(err));\n      dispatch(failure(err));\n    }\n  };\n}\nexport function register(user) {\n  // return the promise using fetch which dispatches appropriately \n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      payload: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      payload: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n\n  return async function dispatch(dispatch) {\n    // dispatch(request(user));\n    try {\n      // const res = await userService.register(user);\n      dispatch(success(user)); // dispatch(alertActions.success(\"Registration successful\"))\n    } catch (err) {// console.log(err);\n      // dispatch(alertActions.error(err))\n      // dispatch(failure(err));\n    }\n  };\n}\nexport const createUser = payload => {\n  return {\n    type: userConstants.USER_SAVE,\n    payload\n  };\n};\n\nconst logout = () => {\n  // complete this function\n  // userService.logout()\n  return {\n    type: userConstants.LOGOUT\n  };\n}; //   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/actions.ts"],"names":["userConstants","alertActions","login","payload","user","console","log","tt","request","type","LOGIN_REQUEST","success","LOGIN_SUCCESS","failure","error","LOGIN_FAILURE","dispatch","err","register","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","createUser","USER_SAVE","logout","LOGOUT"],"mappings":"AAAA,SAAQA,aAAR,QAA4B,SAA5B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AAOA,OAAO,SAASC,KAAT,CAAeC,OAAf,EAAwB;AAC3B;AACA,QAAMC,IAAI,GAAGD,OAAb;AACJE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAiBG,EAAjB;;AACI,WAASC,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAET,aAAa,CAACU,aAAtB;AAAqCN,MAAAA,IAAI,EAACA;AAA1C,KAAP;AAAyD;;AAClF,WAASO,OAAT,CAAiBP,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAET,aAAa,CAACY,aAAtB;AAAqCR,MAAAA,IAAI,EAACA;AAA1C,KAAP;AAAyD;;AAClF,WAASS,OAAT,CAAiBC,KAAjB,EAAwB;AAAE,WAAO;AAAEL,MAAAA,IAAI,EAAET,aAAa,CAACe,aAAtB;AAAqCD,MAAAA;AAArC,KAAP;AAAqD;;AAE/E,SAAO,eAAeE,QAAf,CAAwBA,QAAxB,EAAkC;AACrCA,IAAAA,QAAQ,CAACR,OAAO,CAACJ,IAAD,CAAR,CAAR;;AACA,QAAI;AAGAY,MAAAA,QAAQ,CAACf,YAAY,CAACU,OAAb,CAAqB,SAArB,CAAD,CAAR,CAHA,CAKA;;AACAK,MAAAA,QAAQ,CAACL,OAAO,CAACP,IAAD,CAAR,CAAR;AACH,KAPD,CAOE,OAAOa,GAAP,EAAY;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACAD,MAAAA,QAAQ,CAACf,YAAY,CAACa,KAAb,CAAmBG,GAAnB,CAAD,CAAR;AACAD,MAAAA,QAAQ,CAACH,OAAO,CAACI,GAAD,CAAR,CAAR;AACH;AACJ,GAdD;AAeH;AAGD,OAAO,SAASC,QAAT,CAAkBd,IAAlB,EAA4B;AAC/B;AACA,WAASI,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAET,aAAa,CAACmB,gBAAtB;AAAwChB,MAAAA,OAAO,EAACC;AAAhD,KAAP;AAA+D;;AACxF,WAASO,OAAT,CAAiBP,IAAjB,EAAuB;AAAE,WAAO;AAAEK,MAAAA,IAAI,EAAET,aAAa,CAACoB,gBAAtB;AAAwCjB,MAAAA,OAAO,EAACC;AAAhD,KAAP;AAA+D;;AACxF,WAASS,OAAT,CAAiBC,KAAjB,EAAwB;AAAE,WAAO;AAAEL,MAAAA,IAAI,EAAET,aAAa,CAACqB,gBAAtB;AAAwCP,MAAAA;AAAxC,KAAP;AAAwD;;AAElF,SAAO,eAAeE,QAAf,CAAwBA,QAAxB,EAAkC;AACrC;AACA,QAAI;AAKA;AACAA,MAAAA,QAAQ,CAACL,OAAO,CAACP,IAAD,CAAR,CAAR,CANA,CAQA;AACH,KATD,CASE,OAAOa,GAAP,EAAY,CACV;AACA;AACA;AACH;AACJ,GAhBD;AAkBH;AAED,OAAO,MAAMK,UAAU,GAACnB,OAAO,IAAE;AAE7B,SAAM;AACFM,IAAAA,IAAI,EAACT,aAAa,CAACuB,SADjB;AAEFpB,IAAAA;AAFE,GAAN;AAIH,CANM;;AASP,MAAOqB,MAAM,GAAC,MAAK;AACf;AACA;AACA,SAAO;AACHf,IAAAA,IAAI,EAAET,aAAa,CAACyB;AADjB,GAAP;AAGH,CAND,C,CAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {userConstants} from './types';\nimport axios from 'axios';\nimport { alertActions } from '../alert/action';\n\n\n\n  \n\n  \nexport function login(payload) {\n    // return the promise using fetch which adds to localstorage on resolve\n    const user = payload\nconsole.log(user,tt)\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user:user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user:user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        dispatch(request(user));\n        try {\n           \n            \n            dispatch(alertActions.success(\"working\"))\n        \n            // const res = await userService.login(username, password);\n            dispatch(success(user));\n        } catch (err) {\n            console.log(err);\n            dispatch(alertActions.error(err))\n            dispatch(failure(err));\n        }\n    }\n}\n  \n\nexport function register(user:any) {\n    // return the promise using fetch which dispatches appropriately \n    function request(user) { return { type: userConstants.REGISTER_REQUEST, payload:user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, payload:user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n\n    return async function dispatch(dispatch) {\n        // dispatch(request(user));\n        try {\n\n\n           \n\n            // const res = await userService.register(user);\n            dispatch(success(user));\n       \n            // dispatch(alertActions.success(\"Registration successful\"))\n        } catch (err) {\n            // console.log(err);\n            // dispatch(alertActions.error(err))\n            // dispatch(failure(err));\n        }\n    }\n\n}\n\nexport const createUser=payload=>{\n   \n    return{\n        type:userConstants.USER_SAVE,\n        payload\n    }\n}\n\n\nconst  logout=()=> {\n    // complete this function\n    // userService.logout()\n    return {\n        type: userConstants.LOGOUT\n    }\n}\n  \n//   export const editPatient = (patient: IPatient): EditPatientAction => ({\n//     type: EDIT_PATIENT,\n//     payload: patient\n//   });\n  \n//   export const fetchPatients = (url: string) => {\n//     return dispatch => {\n//       axios\n//         .get<IPatient[]>(url)\n//         .then(res => res.data)\n//         .then(data => {\n//           dispatch(setPatients(data));\n//         })\n//         .catch(err => console.error('Server connections error'));\n//     };\n  "]},"metadata":{},"sourceType":"module"}