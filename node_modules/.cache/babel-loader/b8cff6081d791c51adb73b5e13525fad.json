{"ast":null,"code":"import { userConstants } from './types';\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? user : [];\nexport function authentication() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return [{ ...action.payload\n      }, ...state];\n\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: { ...action.user\n        },\n        ...state\n      };\n\n    case userConstants.LOGIN_FAILURE:\n      return {};\n\n    case userConstants.LOGOUT:\n      return {};\n\n    default:\n      return state;\n  }\n}\nexport function registration() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return { ...state,\n        registering: true\n      };\n\n    case userConstants.REGISTER_SUCCESS:\n      return { ...state,\n        registering: false\n      };\n\n    case userConstants.REGISTER_FAILURE:\n      return { ...state,\n        registering: false\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction getNewId(patients) {\n  return patients.map(patient => patient.id).map(id => parseInt(id)).reduce((largest, id) => Math.max(largest, id + 1), -1).toString();\n}","map":{"version":3,"sources":["/Users/Timbet.Ekanem/Downloads/e-health/frontend/src/redux/auth/reducers.ts"],"names":["userConstants","user","JSON","parse","localStorage","getItem","initialState","authentication","state","action","type","LOGIN_REQUEST","payload","LOGIN_SUCCESS","loggedIn","LOGIN_FAILURE","LOGOUT","registration","REGISTER_REQUEST","registering","REGISTER_SUCCESS","REGISTER_FAILURE","getNewId","patients","map","patient","id","parseInt","reduce","largest","Math","max","toString"],"mappings":"AACA,SAAQA,aAAR,QAA4B,SAA5B;AACI,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAX;AACA,MAAMC,YAAY,GAAGL,IAAI,GAAGA,IAAH,GAAS,EAAlC;AAEA,OAAO,SAASM,cAAT,GAAsD;AAAA,MAA9BC,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AAC3D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAa,CAACW,aAAnB;AACE,aAAO,CAAC,EAAE,GAAGF,MAAM,CAACG;AAAZ,OAAD,EAAuB,GAAGJ,KAA1B,CAAP;;AAEF,SAAKR,aAAa,CAACa,aAAnB;AACE,aAAO;AACLC,QAAAA,QAAQ,EAAE,IADL;AAELb,QAAAA,IAAI,EAAE,EAAE,GAAGQ,MAAM,CAACR;AAAZ,SAFD;AAEqB,WAAGO;AAFxB,OAAP;;AAIF,SAAKR,aAAa,CAACe,aAAnB;AACE,aAAO,EAAP;;AACF,SAAKf,aAAa,CAACgB,MAAnB;AACE,aAAO,EAAP;;AACF;AACE,aAAOR,KAAP;AAdJ;AAgBD;AAED,OAAO,SAASS,YAAT,GAAoD;AAAA,MAA9BT,KAA8B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,aAAa,CAACkB,gBAAnB;AACE,aAAO,EAAE,GAAGV,KAAL;AAAYW,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF,SAAKnB,aAAa,CAACoB,gBAAnB;AACE,aAAO,EAAE,GAAGZ,KAAL;AAAYW,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF,SAAKnB,aAAa,CAACqB,gBAAnB;AACE,aAAO,EAAE,GAAGb,KAAL;AAAYW,QAAAA,WAAW,EAAE;AAAzB,OAAP;;AACF;AACE,aAAOX,KAAP;AARJ;AAUD;;AACP,SAASc,QAAT,CAAkBC,QAAlB,EAA4B;AACxB,SAAOA,QAAQ,CACZC,GADI,CACCC,OAAD,IAAaA,OAAO,CAACC,EADrB,EAEJF,GAFI,CAECE,EAAD,IAAQC,QAAQ,CAACD,EAAD,CAFhB,EAGJE,MAHI,CAGG,CAACC,OAAD,EAAUH,EAAV,KAAiBI,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkBH,EAAE,GAAG,CAAvB,CAHpB,EAG+C,CAAC,CAHhD,EAIJM,QAJI,EAAP;AAKD","sourcesContent":["\nimport {userConstants} from './types';\n    let user = JSON.parse(localStorage.getItem('user'));\n    const initialState = user ? user: [];\n    \n    export function authentication(state = initialState, action) {\n      switch (action.type) {\n        case userConstants.LOGIN_REQUEST:\n          return [{ ...action.payload}, ...state];\n          \n        case userConstants.LOGIN_SUCCESS:\n          return {\n            loggedIn: true,\n            user: { ...action.user }, ...state\n          };\n        case userConstants.LOGIN_FAILURE:\n          return {}; \n        case userConstants.LOGOUT:\n          return {};\n        default:\n          return state\n      }\n    }\n\n    export function registration(state = initialState, action) {\n        switch (action.type) {\n          case userConstants.REGISTER_REQUEST:\n            return { ...state, registering: true };\n          case userConstants.REGISTER_SUCCESS:\n            return { ...state, registering: false }\n          case userConstants.REGISTER_FAILURE:\n            return { ...state, registering: false }\n          default:\n            return state\n        }\n      }\nfunction getNewId(patients) {\n    return patients\n      .map((patient) => patient.id)\n      .map((id) => parseInt(id))\n      .reduce((largest, id) => Math.max(largest, id + 1), -1)\n      .toString();\n  }"]},"metadata":{},"sourceType":"module"}